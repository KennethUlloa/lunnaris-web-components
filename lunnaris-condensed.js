export const decimalFormatter = new Intl.NumberFormat(undefined, {    minimumIntegerDigits: 2});export function loadIcons(name) {    var _content = createElement('div');    fetch(`img/${name}`).    then(response => response.text())    .then(icon => {                _content.innerHTML = icon;    }).catch(reason => console.log('error'));    return _content;}export function createElement(tag, className=null, type=null) {    var element = document.createElement(tag);    if(className !== null){        element.className = className;    }        if(type !== null){        element.type = type;    }    return element;}export function createIconButton(icon, className=null){    var button = createElement('button', className);    fetch(`img/${icon}`).    then(response => response.text())    .then(icon => {        button.innerHTML = icon;    }).catch(error =>{        var img = createElement('img');        img.src = `img/${icon}`;        button.appendChild(img);    });        return button;}export function formatTime(time) {    const seconds = Math.floor(time % 60);    const minutes = Math.floor(time / 60) % 60;    const hours = Math.floor(time / 3600);    if (hours === 0){        return `${minutes}:${decimalFormatter.format(seconds)}`    }else{        return `${hours}:${decimalFormatter.format(minutes)}:${decimalFormatter.format(seconds)}`    }}export class Slidebar{    constructor(value = 0.5, min = 0.0, max = 1.0){        this._value = value;        this._min = min;        this._max = max;                this._slidebar = createElement('div', 'slidebar');        this._bar = createElement('div', 'bar');        this._thumb = createElement('div', 'thumb');        this._onchange = () => {};                this._slidebar.appendChild(this._bar);        this._slidebar.appendChild(this._thumb);        this.mouseDown = false;                        this._bar.addEventListener('click', (e) => {            this.input(e);            this._onchange();         })    }    set value(val) {        const nVal = Math.min(Math.max(this._min, val), this._max);        this._value = nVal;        const percent = (this._value - this._min)/(this._max - this._min);        this._slidebar.style.setProperty('--comp-slidebar-value', percent);    }    get value(){        return this._value;    }    get range(){        return this._max - this.min;    }    get max(){        return this._max;    }    get min(){        return this._min;    }    get root() {        return this._slidebar;    }    input(e) {        const rect = this._bar.getBoundingClientRect();        const percent = Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width;        this.value = percent * (this._max - this._min);            }    render(element) {        var _temp = document.getElementById(element);        _temp.appendChild(this._slidebar);    }    set onchange(funct){        if(funct !== undefined || funct !== null){            this._onchange = funct;        }    }}export function supportsTouch() {    return (('ontouchstart' in window) ||    (navigator.maxTouchPoints > 0) ||    (navigator.msMaxTouchPoints > 0));}export class TouchHandler {    constructor(element, vUmbral = 0.2, hUmbral = 0.2) {        this.start = [0,0];        this.end = [0,0];        this.vMax = 1;        this.hMax = 1;        this._hAction = () => {};        this._vAction = () => {};        element.addEventListener('touchstart', (e) => {            this.hMax = e.target.getBoundingClientRect().height;            this.vMax = e.target.getBoundingClientRect().width;            var touches = e.changedTouches;            for(var i = 0 ; i < touches.length ; i++) {                this.start = [touches[i].clientX, touches[i].clientY];            }        });        element.addEventListener('touchmove', (e) => {e.preventDefault()});        element.addEventListener('touchend', (e) => {            this.hMax = e.target.getBoundingClientRect().width;            this.vMax = e.target.getBoundingClientRect().height;            var touches = e.changedTouches;            for(var i = 0 ; i < touches.length ; i++) {                this.end = [touches[i].clientX, touches[i].clientY];                if( Math.abs(this.end[0] - this.start[0])/this.hMax >= hUmbral) {                    this._hAction(e);                }                if( Math.abs(this.end[1] - this.start[1])/this.vMax >= vUmbral) {                    this._vAction(e);                }            }        });        element.addEventListener('touchcancel', (e) => {            this.hMax = e.target.getBoundingClientRect().height;            this.vMax = e.target.getBoundingClientRect().width;            var touches = e.changedTouches;            for(var i = 0 ; i < touches.length ; i++) {                this.end = [touches[i].clientX, touches[i].clientY];                if( Math.abs(this.end[0] - this.start[0])/this.hMax >= hUmbral) {                    this._hAction(e);                }                if( Math.abs(this.end[1] - this.start[1])/this.vMax >= vUmbral) {                    this._vAction(e);                }                            }        });    }    set horizontalAction(action) {        this._hAction = action;    }    set verticalAction(action) {        this._vAction = action;    }    get horizontal() {        return (this.end[0] - this.start[0])/this.hMax;    }        get vertical() {        return (this.end[1] - this.start[1])/this.vMax;    }    get startPoint() {        return this.start;    }    get endPoint() {        return this.end;    }}const playIcon = `play.svg`;const pauseIcon = `pause.svg`;const expandIcon = `expand.svg`;const minimizeIcon = `minimize.svg`;const volumeIcon = `volume.svg`;const muteIcon = `mute.svg`;export class VideoPlayer {    constructor(video, fromUrl = false){                if(fromUrl){            this._video = document.createElement('video');            this._video.src = video;        }else {            this._video = video;        }                this._videoPlayer = createElement('div', 'videoplayer');         this.controlsPane = createElement('div', 'controlsPane');        this.timelineContainer = createElement('div', 'timelineContainer');        var timeline = createElement('div', 'timeline');        var thumb = createElement('div', 'thumb');        var _time = createElement('div', 'time');        this._duration = createElement('div','duration');        this._currentTime = createElement('div', 'currentTime');        var _buttons = createElement('div','buttons');        var _panel1 = createElement('div', 'buttonPane');        var _panel2 = createElement('div', 'buttonPane');        this._play = createIconButton(playIcon, 'button');        this._pause = createIconButton(pauseIcon, 'button');        this._expand = createIconButton(expandIcon, 'button');        this._minimize = createIconButton(minimizeIcon, 'button');        this._mute = createIconButton(muteIcon, 'button');        this._volume = createIconButton(volumeIcon, 'button');        this._volumebar = new Slidebar(0.5, 0, 1);        var loading = createElement('div', 'loadingItem');        this.floatinPlay = createIconButton(playIcon, 'floatingPlay');        loading.appendChild(createElement('div'));        loading.appendChild(createElement('div'));        loading.appendChild(createElement('div'));        this._topPanel = createElement('div', 'panel top');        this.timePreview = createElement('div', 'timePreview');        this.isFocused = false;                this._videoPlayer.appendChild(this._video);        this._videoPlayer.appendChild(this.controlsPane);        this._videoPlayer.appendChild(loading);        this._videoPlayer.appendChild(this.floatinPlay);         this._videoPlayer.appendChild(this._topPanel);                this.controlsPane.appendChild(this.timelineContainer);                this.timelineContainer.appendChild(timeline);        this.timelineContainer.appendChild(thumb);        this.timelineContainer.appendChild(this.timePreview);                this.controlsPane.appendChild(_time);                _time.appendChild(this._currentTime);        _time.appendChild(this._duration);                this.controlsPane.appendChild(_buttons);                _buttons.appendChild(_panel1);        _panel1.appendChild(this._play);        _panel1.appendChild(this._pause);        var volPane = createElement('div', 'vol-pane');        volPane.appendChild(this._mute);        volPane.appendChild(this._volume);        volPane.appendChild(this._volumebar.root);        _panel1.appendChild(volPane);                _buttons.appendChild(_panel2);        _panel2.appendChild(this._expand);        _panel2.appendChild(this._minimize);                /* Play-pause logic */        this._play.addEventListener('click', ()=> {this.togglePlay();});        this.floatinPlay.addEventListener('click', () => {this.togglePlay();});        this._pause.addEventListener('click', ()=> {this.togglePlay();});        /* Mute-unmute logic */        this._mute.addEventListener('click', ()=> {this.toggleMute();});        this._volume.addEventListener('click', ()=> {this.toggleMute();});                /* Progress update */        this._video.addEventListener('timeupdate', () => {this.updateVideoProgress();});        /* Metadata ready */        this._video.addEventListener('loadedmetadata', () => {this.loadVideoTime();});        this._video.addEventListener('durationchange', () => {this.loadVideoTime();});        this._video.addEventListener('canplay', () => {this.loadVideoTime();            loading.classList.toggle('hidden', true);         });        /* End of video */        this._video.addEventListener('ended', () => {            this.floatinPlay.classList.toggle('hidden', false);             this._play.classList.toggle('hidden', false);            this._pause.classList.toggle('hidden', true);        });                this._video.addEventListener('keydown', (e)=> {            console.log(e.key);        });        /* Loading animation */        this._video.addEventListener('loadstart', ()=>{loading.classList.toggle('hidden', true);});        this._video.addEventListener('waiting', ()=>{            loading.classList.toggle('hidden', false);        });        /* Selected time */        this.timelineContainer.addEventListener('click', (e) => {this.handleSelectTime(e);});                /* Fullscreen */        this._expand.addEventListener('click', () => {this.toggleFullscreen()});        this._minimize.addEventListener('click', () => {this.toggleFullscreen()});        var timeout;        this._videoPlayer.addEventListener('mousemove', () =>{            this.unhideControls();            clearTimeout(timeout);            timeout = setTimeout(()=>{this.hideControls()}, 1000);        });        document.addEventListener('fullscreenchange', ()=>{            this.checkFullScreen();        });        /* Volume logic */        this._volumebar.onchange = () => {            this._video.volume = this._volumebar.value;        };        /* Time preview */        this.timelineContainer.addEventListener('mousemove', (e) => {this.timePreviewUpdate(e);});                this._pause.classList.toggle('hidden', true);        this._mute.classList.toggle('hidden', true);        this._minimize.classList.toggle('hidden', true);        this._videoPlayer.style.setProperty('--video-progress', 0);        this._volumebar.value = 0.5;        loading.classList.toggle('hidden', true);        this.timePreview.textContent = "-:--";        this.controlsPane.classList.toggle('hidden', true);        this._videoPlayer.addEventListener('mouseenter', () => {this.isFocused = true});        this._videoPlayer.addEventListener('mouseleave', () => {this.isFocused = false});        document.addEventListener('keydown', (e)=> {            if(this.isFocused){                e.preventDefault();                if(e.key === 'ArrowLeft'){                    this.skipBackward();                }else if(e.key === 'ArrowRight'){                    this.skipForward();                }else if(e.key === ' '){                    this.togglePlay();                }else if(e.key === 'm'){                    this.toggleMute();                }else if(e.key === 'ArrowUp'){                    this.volume += 0.1;                 }else if(e.key === 'ArrowDown'){                    this.volume -= 0.1;                }else if(e.key === 'f'){                    this.toggleFullscreen();                }            }        });        this.skipValue = 0.1;    }    setTopPanel(content, type='string') {        if (content !== null && content !== undefined){            if(type === 'string'){                this._topPanel.innerHTML = content;            }else if (type === 'element') {                this._topPanel.appendChild(content);            }        }    }    checkFullScreen(){        if(document.fullscreenElement === null){            this._minimize.classList.toggle('hidden', true);            this._expand.classList.toggle('hidden', false);        }else if (document.fullscreenElement === this._videoPlayer){            this._minimize.classList.toggle('hidden', false);            this._expand.classList.toggle('hidden', true);        }    }    togglePlay(){        if(this._video.paused){            this._video.play();            this.floatinPlay.classList.toggle('hidden', true);            this._pause.classList.toggle('hidden', false);            this._play.classList.toggle('hidden', true);        }else{            this._video.pause();            this.floatinPlay.classList.toggle('hidden', false);            this._pause.classList.toggle('hidden', true);            this._play.classList.toggle('hidden', false);        }    }    toggleMute(){        this._video.muted = !this._video.muted;        if(this._video.muted){            this._mute.classList.toggle('hidden', false);            this._volume.classList.toggle('hidden', true);        }else {            this._mute.classList.toggle('hidden', true);            this._volume.classList.toggle('hidden', false);        }    }    toggleFullscreen() {        if(document.fullscreenElement == null){            this._videoPlayer.requestFullscreen();         }else{             document.exitFullscreen();        }    }    updateVideoProgress(){        if(!Number.isNaN(this._video.duration) && !Number.isNaN(this._video.currentTime)){            const progress = this._video.currentTime/this._video.duration;            this._videoPlayer.style.setProperty('--video-progress', progress);            this._currentTime.textContent = formatTime(this._video.currentTime);        }    }    handleSelectTime(e) {        const rect = this.timelineContainer.getBoundingClientRect();        const percent = Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width;        this._video.currentTime = this._video.duration * percent;        this.updateVideoProgress();    }    timePreviewUpdate(e) {        const rect = this.timelineContainer.getBoundingClientRect();        const cursorOffset = Math.min(Math.max(0, e.x - rect.x), rect.width);        const percent = cursorOffset / rect.width;        if(cursorOffset < this.timePreview.getBoundingClientRect().width/2){            this.timePreview.classList.toggle('leftClip', true);        }else{            this.timePreview.classList.toggle('leftClip', false);        }        if(cursorOffset > rect.width - this.timePreview.getBoundingClientRect().width/2){            this.timePreview.classList.toggle('rightClip', true);        }else{            this.timePreview.classList.toggle('rightClip', false);        }        this._videoPlayer.style.setProperty('--video-preview', percent);        if(!Number.isNaN(this._video.duration)){            var percentTime = this._video.duration*percent;            this.timePreview.textContent = formatTime(percentTime);        }    }    loadVideoTime(){        if(!Number.isNaN(this._video.duration) && !Number.isNaN(this._video.currentTime)){            this._currentTime.textContent = formatTime(this._video.currentTime);            this._duration.textContent = formatTime(this._video.duration);        }    }    hideControls() {        if (document.fullscreenElement === this._videoPlayer){            this._videoPlayer.style.cursor = 'none';        }        this.controlsPane.classList.toggle('hidden', true);        this._topPanel.classList.toggle('hidden', true);    }    unhideControls() {        this.controlsPane.classList.toggle('hidden', false);        this._videoPlayer.style.cursor = 'default';        this._topPanel.classList.toggle('hidden', false);    }    skipForward() {        if(Number.isNaN(this._video.duration)){return;}        this._video.currentTime += this._skipValue * this._video.duration;    }    skipBackward() {        if(Number.isNaN(this._video.duration)){return;}        this._video.currentTime -= this._skipValue * this._video.duration;    }    set skipValue(value) {        this._skipValue = value;    }    get skipValue() {        return this._skipValue;    }    set volume(value) {        this._volumebar.value = Math.max(0, Math.min(1, value));        this._video.volume = Math.max(0, Math.min(1, value));    }    get volume() {        return this._video.volume;    }    render(element) {        var _temp = document.getElementById(element);        _temp.appendChild(this._videoPlayer);    }    get root() {        return this._videoPlayer;    }    get videoElement() {        return this._video;    }}